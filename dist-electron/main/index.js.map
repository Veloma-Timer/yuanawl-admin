{"version":3,"file":"index.js","sources":["../../electron/main/notification.ts","../../electron/main/getMacAddress.ts","../../electron/main/index.ts"],"sourcesContent":["import {ipcMain, Notification} from 'electron';\n\nexport const useNotification = () => {\n  const isMac = process.platform === 'darwin';\n\n// 消息处理\n  ipcMain.handle('notification', (event, params: NotificationParams) => {\n    const sender = event.sender;\n    //  默认png\n    if (!params.icon) {\n      // params.icon = join(__dirname, '..', '..', 'build', 'icons', 'icon.ico');\n      params.icon = \"../../src/assets/images/logo-small.png\";\n    }\n\n    if (isMac && params.type === 'message') {\n      // 通过通知类型是message则代表是 app发来的消息, 需要回复\n      params.hasReply = true;\n      params.replyPlaceholder = '请输入';\n    }\n\n    const baseType = params.type === 'base' || !params.type\n\n    params.timeoutType = baseType ? 'default' : 'never';\n\n    const notification = new Notification(params);\n    notification.show();\n\n    if (baseType) return;\n\n    notification.on('click', () => sender.send('return-notification', params));\n\n    if (!isMac) return;\n\n    notification.on('reply', (_, reply: string) => sender.send('return-notification', {...params, reply}));\n\n  });\n}\n","// Prepare\nimport {networkInterfaces} from 'node:os'\n\nconst macRegex = /(?:[a-z0-9]{1,2}[:-]){5}[a-z0-9]{1,2}/i\nconst zeroRegex = /(?:[0]{1,2}[:-]){5}[0]{1,2}/\n\n/**\n * Get the first proper MAC address\n * @param iface If provided, restrict MAC address fetching to this interface\n */\nexport function getMacAddress(iface?: string): string {\n  const list = networkInterfaces()\n  if (iface) {\n    const parts = list[iface]\n    if (!parts) {\n      throw new Error(`interface ${iface} was not found`)\n    }\n    for (const part of parts) {\n      if (zeroRegex.test(part.mac) === false) {\n        return part.mac\n      }\n    }\n    throw new Error(`interface ${iface} had no valid mac addresses`)\n  } else {\n    for (const [key, parts] of Object.entries(list)) {\n      // for some reason beyond me, this is needed to satisfy typescript\n      // fix https://github.com/bevry/getmac/issues/100\n      if (!parts) continue\n      for (const part of parts) {\n        if (zeroRegex.test(part.mac) === false) {\n          return part.mac\n        }\n      }\n    }\n  }\n  throw new Error('failed to get the MAC address')\n}\n\n/** Check if the input is a valid MAC address */\nexport function isMAC(macAddress: string) {\n  return macRegex.test(macAddress)\n}\n","import {app, BrowserWindow, ipcMain, shell} from 'electron';\nimport { useNotification } from './notification';\nimport { getMacAddress } from './getMacAddress';\nimport {dirname, join} from 'node:path';\nimport {fileURLToPath} from 'node:url';\nimport {release} from 'node:os';\n\n// @ts-ignore\nglobalThis.__filename = fileURLToPath(import.meta.url)\nglobalThis.__dirname = dirname(__filename)\n\nprocess.env.DIST_ELECTRON = join(__dirname, '..')\nprocess.env.DIST = join(process.env.DIST_ELECTRON, '../dist')\nprocess.env.VITE_PUBLIC = process.env.VITE_DEV_SERVER_URL\n  ? join(process.env.DIST_ELECTRON, '../public')\n  : process.env.DIST\n\n// Disable GPU Acceleration for Windows 7\nif (release().startsWith('6.1')) app.disableHardwareAcceleration()\n\n// Set application name for Windows 10+ notifications\nif (process.platform === 'win32') app.setAppUserModelId(app.getName())\n\nif (!app.requestSingleInstanceLock()) {\n  app.quit()\n  process.exit(0)\n}\n\nlet win: BrowserWindow | null = null\n// Here, you can also use other preload\nconst preload = join(__dirname, '../preload/index.js')\n\nconst url = process.env.VITE_DEV_SERVER_URL\nconst indexHtml = join(process.env.DIST, 'index.html')\n\nasync function createWindow() {\n  win = new BrowserWindow({\n    title: 'Main window',\n    icon: join(process.env.VITE_PUBLIC, 'favicon.ico'),\n    width: 1200,\n    height: 800,\n    webPreferences: {\n      preload,\n    },\n  });\n\n\n  if (process.env.VITE_DEV_SERVER_URL) { // electron-vite-vue#298\n    win.loadURL(url)\n    // Open devTool if the app is not packaged\n    win.webContents.openDevTools()\n  } else {\n    win.loadFile(indexHtml)\n  }\n\n  // Test actively push message to the Electron-Renderer\n  win.webContents.on('did-finish-load', () => {\n    win?.webContents.send('main-process-message', new Date().toLocaleString())\n  })\n\n  // Make all links open with the browser, not with the application\n  win.webContents.setWindowOpenHandler(({url}) => {\n    if (url.startsWith('https:')) shell.openExternal(url)\n    return {action: 'deny'}\n  })\n  // win.webContents.on('will-navigate', (event, url) => { }) #344\n}\n\n\napp.whenReady().then(createWindow);\n\napp.on('window-all-closed', () => {\n  win = null\n  if (process.platform !== 'darwin') app.quit()\n})\n\napp.on('second-instance', () => {\n  if (win) {\n    // Focus on the main window if the user tried to open another\n    if (win.isMinimized()) win.restore()\n    win.focus()\n  }\n})\n\napp.on('activate', () => {\n  const allWindows = BrowserWindow.getAllWindows()\n  if (allWindows.length) {\n    allWindows[0].focus()\n  } else {\n    createWindow()\n  }\n})\n\n// New window example arg: new windows url\nipcMain.handle('open-win', (_, arg) => {\n  const childWindow = new BrowserWindow({\n    webPreferences: {\n      preload,\n      nodeIntegration: true,\n      contextIsolation: false,\n    },\n  })\n\n  if (process.env.VITE_DEV_SERVER_URL) {\n    childWindow.loadURL(`${url}#${arg}`)\n  } else {\n    childWindow.loadFile(indexHtml, {hash: arg})\n  }\n});\n\nipcMain.handle('open-url', (_, url) => shell.openExternal(url));\n\nipcMain.handle('ready', (event) => {\n  const sender = event.sender;\n\n  const address = getMacAddress();\n  console.log('发送')\n  sender.send('mac-address', address);\n})\n\nuseNotification();\n\n"],"names":["ipcMain","Notification","networkInterfaces","fileURLToPath","dirname","join","release","app","BrowserWindow","url","shell"],"mappings":"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"}